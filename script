-- Define variables
game:GetService("StarterGui"):SetCore("SendNotification", {Title = "AIM + ESP", Text = "Thanks for using! This script was made for a game called GunFight Arena, but it can be used in any other game.", Duration = 4,});
	wait(0.2)
	game:GetService("StarterGui"):SetCore("SendNotification", {Title = "How to USE", Text = "Press E to lock onto someone", Duration = 4,});
-- Define variables
local UserInputService = game:GetService("UserInputService")
local Players = game:GetService("Players")
local camera = game.Workspace.CurrentCamera
local lockedOn = false
local targetPlayer = nil
local LockPart = "Head" -- Specify the part to lock onto

-- Create the Drawing object for FOV
local FOV = Drawing.new("Circle")
FOV.Radius = 45
FOV.Thickness = 2
FOV.Transparency = 1
FOV.Color = Color3.fromRGB(165, 199, 57)

-- Function to update the FOV circle's position
local function UpdateFOVPosition()
    local mouse = game.Players.LocalPlayer:GetMouse()
    FOV.Position = Vector2.new(mouse.X, mouse.Y + 36)
end

-- Connect the FOV update function to the RunService's Heartbeat
game:GetService("RunService").Heartbeat:Connect(UpdateFOVPosition)

-- Function to check if a player is inside the FOV circle and close to the mouse
local function IsPlayerInFOV(player)
    local mouse = game.Players.LocalPlayer:GetMouse()
    local mousePosition = Vector2.new(mouse.X, mouse.Y)
    local playerPosition = camera:WorldToScreenPoint(player.Character[LockPart].Position)

    local distance = (mousePosition - Vector2.new(playerPosition.X, playerPosition.Y)).Magnitude
    return distance <= FOV.Radius
end

-- Function to find the closest player inside the FOV and close to the mouse
local function FindClosestPlayer(position)
    local closestPlayer = nil
    local closestDistance = math.huge
    local localPlayer = game.Players.LocalPlayer

    for _, player in pairs(Players:GetPlayers()) do
        if player ~= localPlayer then -- Skip the local player
            local character = player.Character
            if character and character:IsDescendantOf(game) and IsPlayerInFOV(player) then
                local humanoid = character:FindFirstChildOfClass("Humanoid")
                if humanoid then
                    local part = humanoid.Parent:FindFirstChild(LockPart)

                    if part then
                        local distance = (part.Position - position).Magnitude

                        -- Check if the player is on the same team as the local player, if teams exist
                        local playerTeam = player.Team
                        local localPlayerTeam = localPlayer.Team

                        if not playerTeam or not localPlayerTeam or playerTeam ~= localPlayerTeam then
                            if distance < closestDistance then
                                closestDistance = distance
                                closestPlayer = player
                            end
                        end
                    end
                end
            end
        end
    end

    return closestPlayer
end

-- Function to lock onto or unlock from the closest player inside the FOV and close to the mouse
local function ToggleLockOn()
    local mouse = game.Players.LocalPlayer:GetMouse()
    local mousePosition = mouse.Hit.p

    if lockedOn then
        lockedOn = false
        targetPlayer = nil
        print("Unlocking from player.")
    else
        targetPlayer = FindClosestPlayer(mousePosition)
        if targetPlayer then
            lockedOn = true
            print("Locking onto player:", targetPlayer.Name)
        else
            print("No eligible players found inside FOV and close to the cursor. Locking onto Unknown.")
        end
    end
end

-- Detect the "E" key press to toggle lock on/off
UserInputService.InputBegan:Connect(function(input, gameProcessedEvent)
    if not gameProcessedEvent and input.KeyCode == Enum.KeyCode.E then
        ToggleLockOn()
    end
end)

-- Function to update the camera in real-time
local function UpdateCamera()
    if lockedOn and targetPlayer then
        local character = targetPlayer.Character
        if character and character:IsDescendantOf(game) then
            local humanoid = character:FindFirstChildOfClass("Humanoid")
            if humanoid then
                local part = humanoid.Parent:FindFirstChild(LockPart)

                if part then
                    local targetPosition = part.Position
                    local cameraPosition = camera.CFrame.p
                    local lookVector = (targetPosition - cameraPosition).unit

                    camera.CFrame = CFrame.new(cameraPosition, cameraPosition + lookVector)
                else
                    lockedOn = false
                    targetPlayer = nil
                    print("Lost lock on player. Unlocking.")
                end
            else
                lockedOn = false
                targetPlayer = nil
                print("Player's character is in a ragdoll state. Unlocking.")
            end
        else
            lockedOn = false
            targetPlayer = nil
            print("Locked-on player's character was destroyed. Unlocking.")
        end
    end
end

-- Connect the camera update function to the RunService's Heartbeat
local RunService = game:GetService("RunService")
RunService.Heartbeat:Connect(UpdateCamera)
loadstring(game:HttpGet("https://raw.githubusercontent.com/vis0795/GunFightArena/main/esp"))()
